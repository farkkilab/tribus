plot.data$pairs = NA
ind = !(plot.data$cell.type %in% appeared.or.disappeared.types)
plot.data$pairs[ind] = rep(1:(sum(ind)/2),each=2)
linecol = subset(plot.data[ind,],!is.na(plot.data[ind,]$cell.type)) %>% group_by(pairs) %>%summarise_at(.vars="value",.funs = function(x){ifelse(sum(x*c(1,-1))>0,'new','old')})
linecol = rep(linecol$value, each=2)
p = ggplot(data = plot.data, aes(x=variable,y=value,color=iter)) + geom_point() + facet_wrap(~cell.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 5)) + geom_line(data=subset(plot.data,!is.na(plot.data$pairs)),aes(group=pairs,color=linecol))
# TODO add gate index
gi  = data.frame()
for(i in 1:nrow(means.by.cell.type)) {
cell.type = means.by.cell.type$cell.type[i]
if(cell.type %in% gsub(" ",".",names(global.gates))){
gates = global.gates
}else {
gates = immune.gates
}
tmp.gates = unlist(gates[grep(gsub('.cell.*','',cell.type),names(gates))])
if(is.null(tmp.gates)) {
warning(paste0('No gates for cell type ',cell.type))
next
}
pos = unique(tmp.gates[grep('Pos', names(tmp.gates))])
neg = unique(tmp.gates[grep('Neg', names(tmp.gates))])
neg = neg[which(neg%in%colnames(means.by.cell.type))]
pos = pos[which(pos%in%colnames(means.by.cell.type))]
#make a backup
meansct = means.by.cell.type
means.by.cell.type[do.call(cbind,lapply(means.by.cell.type, is.infinite))] <- 0 #Replace infinities with 0 (not ideal)
gate.index = sum(means.by.cell.type[i,pos])/length(pos)-sum(means.by.cell.type[i,neg])/length(neg)
means.by.cell.type = meansct
gi = rbind(gi, data.frame(index=gate.index, cell.type=cell.type, iter = means.by.cell.type$iter[i]))
}
gi$pairs = rep(1:(nrow(gi)/2),each=2)
linecol2 = gi %>% group_by(pairs) %>%summarise_at(.vars="index",.funs = function(x){ifelse(sum(x*c(1,-1))>0,'new','old')})
linecol2 = rep(linecol2$index, each=2)
pgi = ggplot(data = gi, aes(x=cell.type,y=index,color=iter)) + geom_point() + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 5)) + geom_line(aes(group=pairs,color=linecol2))
plots = list(p,pgi)
# Heatmaps
for(fiter in c("new", "old")) {
hmap.subset = data.frame(subset(means.by.cell.type,means.by.cell.type$iter==fiter)[,c(-(2:5))])
row.names(hmap.subset) = hmap.subset$cell.type
row_ha = rowAnnotation(cells=anno_barplot(as.vector(table(subset(data.temp,data.temp$iter==fiter)$cell.type))))
ph = plot.heatmap(scale(hmap.subset[,-1]),row_anno=row_ha)
plots = append(plots,ph)
}
return(plots)
}
ind.plots = index_plots(list.old,list.old)
source('qc_functions.R')
ind.plots = index_plots(list.old,list.old)
data.temp = data.frame()
appeared.or.disappeared.types = c()
old = list.old
new = old
# Firstly combine the sample data to a single data frame containing only columns of interest
# TODO in the current version of cell type caller, the result might already be in a single df making this step redundant
for(sn in 1:length(old)) {
old.cells = table(old[[sn]][,cell.type.column])
new.cells = table(new[[sn]][,cell.type.column])
# No differences in cell types
df.old = old[[sn]]
df.old = df.old[,marker.in.gates(colnames(df.old))]
df.old[,cell.type.column] = old[[sn]][,cell.type.column]
df.old$iter = "old"
df.new = new[[sn]]
df.new = df.new[,marker.in.gates(colnames(df.new))]
df.new[,cell.type.column] = new[[sn]][,cell.type.column]
df.new$iter = "new"
df.temp = rbind(df.old, df.new)
df.temp$sample = sn
df.temp = subset(df.temp, !is.na(df.temp[,cell.type.column]))
appeared.or.disappeared.types = c(appeared.or.disappeared.types,setdiff(unique(df.new[,cell.type.column]),unique(df.old[,cell.type.column])))
appeared.or.disappeared.types = unique(c(appeared.or.disappeared.types,setdiff(unique(df.old[,cell.type.column]),unique(df.new[,cell.type.column]))))
rm(df.old)
rm(df.new)
data.temp = rbind(data.temp, df.temp)
}
# Marker index
means.by.cell.type = data.temp %>% group_by(cell.type,iter) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
# Marker index
means.by.cell.type = data.temp %>% group_by(cell.type.column,iter) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
# Marker index
means.by.cell.type = data.temp %>% group_by(vars(cell.type.column),iter) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
?vars
# Marker index
means.by.cell.type = data.temp %>% group_by(vars(cell.type.column,"iter")) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
# Marker index
means.by.cell.type = data.temp %>% group_by_at(cell.type.column,iter) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
# Marker index
means.by.cell.type = data.temp %>% group_by_at(cell.type.column,"iter") %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
?group_by_at
# Marker index
means.by.cell.type = data.temp %>% group_by_at(c(cell.type.column,"iter")) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
colnames(data.temp)
cell.type.column = "GlobalCellType"
# Marker index
means.by.cell.type = data.temp %>% group_by_at(c(cell.type.column,"iter")) %>% summarise_at(.vars=colnames(data.temp)[7:(ncol(data.temp))],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
# Marker index
means.by.cell.type = data.temp %>% group_by_at(c(cell.type.column,"iter")) %>% summarise_at(.vars=colnames(data.temp)[1:(ncol(data.temp)-2)],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
# Marker index
means.by.cell.type = data.temp %>% group_by_at(c(cell.type.column,"iter")) %>% summarise_at(.vars=colnames(data.temp)[1:(ncol(data.temp)-1)],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
data.temp %>% group_by_at(c(cell.type.column,"iter"))
# Marker index
means.by.cell.type = data.temp %>% group_by_at(c(cell.type.column,"iter")) %>% summarise_at(.vars=colnames(data.temp)[1:(ncol(data.temp)-3)],.funs = mean)#[1:(ncol(data.temp)-3)],.funs = mean)
plot.data = melt(means.by.cell.type, id.vars = c('cell.type','iter'))
plot.data = melt(means.by.cell.type, id.vars = c(cell.type.column,'iter'))
plot.data$pairs = NA
ind = !(plot.data[,cell.type.column] %in% appeared.or.disappeared.types)
plot.data$pairs[ind] = rep(1:(sum(ind)/2),each=2)
linecol = subset(plot.data[ind,],!is.na(plot.data[ind,][,cell.type.column])) %>% group_by(pairs) %>%summarise_at(.vars="value",.funs = function(x){ifelse(sum(x*c(1,-1))>0,'new','old')})
linecol = rep(linecol$value, each=2)
p = ggplot(data = plot.data, aes(x=variable,y=value,color=iter)) + geom_point() + facet_wrap(~cell.type) + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 5)) + geom_line(data=subset(plot.data,!is.na(plot.data$pairs)),aes(group=pairs,color=linecol))
p
as.formula(paste0("~",cell.type.column))
p = ggplot(data = plot.data, aes(x=variable,y=value,color=iter)) + geom_point() + facet_wrap(as.formula(paste0("~",cell.type.column))) + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 5)) + geom_line(data=subset(plot.data,!is.na(plot.data$pairs)),aes(group=pairs,color=linecol))
p
# TODO add gate index
gi  = data.frame()
for(i in 1:nrow(means.by.cell.type)) {
cell.type = means.by.cell.type[,cell.type.column][i]
if(cell.type %in% gsub(" ",".",names(global.gates))){
gates = global.gates
}else {
gates = immune.gates
}
tmp.gates = unlist(gates[grep(gsub('.cell.*','',cell.type),names(gates))])
if(is.null(tmp.gates)) {
warning(paste0('No gates for cell type ',cell.type))
next
}
pos = unique(tmp.gates[grep('Pos', names(tmp.gates))])
neg = unique(tmp.gates[grep('Neg', names(tmp.gates))])
neg = neg[which(neg%in%colnames(means.by.cell.type))]
pos = pos[which(pos%in%colnames(means.by.cell.type))]
#make a backup
meansct = means.by.cell.type
means.by.cell.type[do.call(cbind,lapply(means.by.cell.type, is.infinite))] <- 0 #Replace infinities with 0 (not ideal)
gate.index = sum(means.by.cell.type[i,pos])/length(pos)-sum(means.by.cell.type[i,neg])/length(neg)
means.by.cell.type = meansct
gi = rbind(gi, data.frame(index=gate.index, cell.type=cell.type, iter = means.by.cell.type$iter[i]))
}
i
cell.type = means.by.cell.type[,cell.type.column][i]
if(cell.type %in% gsub(" ",".",names(global.gates))){
gates = global.gates
}else {
gates = immune.gates
}
tmp.gates = unlist(gates[grep(gsub('.cell.*','',cell.type),names(gates))])
gsub('.cell.*','',cell.type)
cell.type
as.character(cell.type)
c(cell.type)
unlist(cell.type)
cell.type = unlist(means.by.cell.type[,cell.type.column])[i]
cell.type
if(cell.type %in% gsub(" ",".",names(global.gates))){
gates = global.gates
}else {
gates = immune.gates
}
tmp.gates = unlist(gates[grep(gsub('.cell.*','',cell.type),names(gates))])
if(is.null(tmp.gates)) {
warning(paste0('No gates for cell type ',cell.type))
next
}
gates
gsub(" ",".",names(global.gates))
global.gates
source("ang_gates.r")
global.gates
cell.type = unlist(means.by.cell.type[,cell.type.column])[i]
if(cell.type %in% gsub(" ",".",names(global.gates))){
gates = global.gates
}else {
gates = immune.gates
}
tmp.gates = unlist(gates[grep(gsub('.cell.*','',cell.type),names(gates))])
if(is.null(tmp.gates)) {
warning(paste0('No gates for cell type ',cell.type))
next
}
pos = unique(tmp.gates[grep('Pos', names(tmp.gates))])
neg = unique(tmp.gates[grep('Neg', names(tmp.gates))])
neg = neg[which(neg%in%colnames(means.by.cell.type))]
pos = pos[which(pos%in%colnames(means.by.cell.type))]
#make a backup
meansct = means.by.cell.type
means.by.cell.type[do.call(cbind,lapply(means.by.cell.type, is.infinite))] <- 0 #Replace infinities with 0 (not ideal)
gate.index = sum(means.by.cell.type[i,pos])/length(pos)-sum(means.by.cell.type[i,neg])/length(neg)
means.by.cell.type = meansct
gi = rbind(gi, data.frame(index=gate.index, cell.type=cell.type, iter = means.by.cell.type$iter[i]))
# TODO add gate index
gi  = data.frame()
for(i in 1:nrow(means.by.cell.type)) {
cell.type = unlist(means.by.cell.type[,cell.type.column])[i]
if(cell.type %in% gsub(" ",".",names(global.gates))){
gates = global.gates
}else {
gates = immune.gates
}
tmp.gates = unlist(gates[grep(gsub('.cell.*','',cell.type),names(gates))])
if(is.null(tmp.gates)) {
warning(paste0('No gates for cell type ',cell.type))
next
}
pos = unique(tmp.gates[grep('Pos', names(tmp.gates))])
neg = unique(tmp.gates[grep('Neg', names(tmp.gates))])
neg = neg[which(neg%in%colnames(means.by.cell.type))]
pos = pos[which(pos%in%colnames(means.by.cell.type))]
#make a backup
meansct = means.by.cell.type
means.by.cell.type[do.call(cbind,lapply(means.by.cell.type, is.infinite))] <- 0 #Replace infinities with 0 (not ideal)
gate.index = sum(means.by.cell.type[i,pos])/length(pos)-sum(means.by.cell.type[i,neg])/length(neg)
means.by.cell.type = meansct
gi = rbind(gi, data.frame(index=gate.index, cell.type=cell.type, iter = means.by.cell.type$iter[i]))
}
gi$pairs = rep(1:(nrow(gi)/2),each=2)
linecol2 = gi %>% group_by(pairs) %>%summarise_at(.vars="index",.funs = function(x){ifelse(sum(x*c(1,-1))>0,'new','old')})
linecol2 = rep(linecol2$index, each=2)
pgi = ggplot(data = gi, aes(x=cell.type,y=index,color=iter)) + geom_point() + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 5)) + geom_line(aes(group=pairs,color=linecol2))
pgi
# Heatmaps
for(fiter in c("new", "old")) {
hmap.subset = data.frame(subset(means.by.cell.type,means.by.cell.type$iter==fiter)[,c(-(2:5))])
row.names(hmap.subset) = hmap.subset[,cell.type.column]
row_ha = rowAnnotation(cells=anno_barplot(as.vector(table(subset(data.temp,data.temp$iter==fiter)[,cell.type.column]))))
ph = plot.heatmap(scale(hmap.subset[,-1]),row_anno=row_ha)
plots = append(plots,ph)
}
plots=list()
# Heatmaps
for(fiter in c("new", "old")) {
hmap.subset = data.frame(subset(means.by.cell.type,means.by.cell.type$iter==fiter)[,c(-(2:5))])
row.names(hmap.subset) = hmap.subset[,cell.type.column]
row_ha = rowAnnotation(cells=anno_barplot(as.vector(table(subset(data.temp,data.temp$iter==fiter)[,cell.type.column]))))
ph = plot.heatmap(scale(hmap.subset[,-1]),row_anno=row_ha)
plots = append(plots,ph)
}
plot(plots[[1]])
print(plots[[1]])
print(plots[[2]])
# Get a list of available files for analysis.
# By default, the longest filename is the new iteration and file with shortest filename is the old iteration
# if multiple files are found
files = list.files("./data")
files
# Only include RData files in the selection
files = files[grep('rdata',files,T)]
files
# Get a list of available files for analysis.
# By default, the longest filename is the new iteration and file with shortest filename is the old iteration
# if multiple files are found
files = list.files("./data")
# Only include RData files in the selection
files = files[grep('rdata',files,T)]
# Are there more than two iterations?
comparison = length(files)>1
list.old = loadRData(paste0("./data/",files[which.min(nchar(files))]))
list.old = lapply(list.old, combine_gates)
save(alldata,"alldata.rdata")
save(alldata,file="alldata.rdata")
comparison | TRUE
source('I:/tribus/tribus/tribviz/qc_functions.R', echo=TRUE)
getwd()
?stopifnot
library(tidyverse)
?map_df()
?set_names
?grepl
sapply(1:10,function(x) paste0(x,'.csv'))
a = sapply(1:10,function(x) paste0(x,'.csv')
)
gsub(".csv", "", a)
rep(rep(1,3),3)
oldpath = "I:\pdf"
oldpath = "I:/pdf"
list.old = set_names(list.files(oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(oldpath, pattern = ".csv")))%>%
map_dfr(~read.csv(.), .id="sample")
list.old
list.old = set_names(list.files(oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(oldpath, pattern = ".csv")))%>%
map_dfr(~read.csv(.), .id="sample")
list.old
colnames(list.old)
unique(list.old$sample)
subset(list.old$sample=="Book1")
?subset
subset(list.old,sample=="Book1")
install.packages("iotools")
library("iotools")
params$oldpath = "I:/tribus/tribus/tribviz/data/gated"
params = df()
params = df(oldpath="I:/tribus/tribus/tribviz/data/gated")
params = data.frame(oldpath="I:/tribus/tribus/tribviz/data/gated")
source('qc_functions.R')
# TODO: Check if the column names behave as expected
# TODO: Check if there's more calls than global cell type before combining gates
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(.), .id="sample")
View(df.old)
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))
params$oldpath
params$oldpath="I:/tribus/tribus/tribviz/data/gated"
# TODO: Check if the column names behave as expected
# TODO: Check if there's more calls than global cell type before combining gates
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(.), .id="sample")
params$oldpath="I:/tribus/tribus/tribviz/data/gated"
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))
df.old = map_dfr(~iotools::read.csv.raw(df.old), .id="sample")
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(.), .id="sample")
head(df.old)
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(., header = T,sep = " "), .id="sample")
colnames(df.old)
colnames(df.old)[-1]
tail(colnames(df.old),1)
grep(tail(colnames(df.old),1))
?grep
grep("GlobalCellType",tail(colnames(df.old),1))
colnames(df.old)
gsub('\"', "", colnames(df.old))
library(ggplot2)
library(tidyverse)
library(uwot)
library(RcppParallel)
library(reshape2)
library(ggalluvial)
#library(pheatmap)
library(ComplexHeatmap)
options(dplyr.summarise.inform = FALSE)
source("ang_gates.R")
params = t(c("I:/tribus/tribus/tribviz/data/gated", "I:/tribus/tribus/tribviz/data/gated_1"))
colnames(params) = c("oldpath","newpath")
params
params$oldpath
params = as.data.frame(params)
params$oldpath
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(., header = T,sep = " "), .id="sample")
colnames(df.old) = gsub('\"', "", colnames(df.old))
if(grep(GlobalCellType,tail(colnames(df.old),1))!=1)
{
df.old = combine_gates(df.old)
}
df.new = set_names(list.files(params$newpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$newpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(., header = T,sep = " "), .id="sample")
colnames(df.new) = gsub('\"', "", colnames(df.new))
if(grep(GlobalCellType,tail(colnames(df.new),1))!=1)
{
df.new = combine_gates(df.new)
}
source('qc_functions.R')
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(., header = T,sep = " "), .id="sample")
colnames(df.old) = gsub('\"', "", colnames(df.old))
if(grep(GlobalCellType,tail(colnames(df.old),1))!=1)
{
df.old = combine_gates(df.old)
}
params = t(c("I:/tribus/tribus/tribviz/data/gated", "I:/tribus/tribus/tribviz/data/gated_1"))
colnames(params) = c("oldpath","newpath")
params = as.data.frame(params)
df.old = set_names(list.files(params$oldpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$oldpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(., header = T,sep = " "), .id="sample")
colnames(df.old) = gsub('\"', "", colnames(df.old))
if(grep(GlobalCellType,tail(colnames(df.old),1))!=1)
{
df.old = combine_gates(df.old)
}
df.new = set_names(list.files(params$newpath, pattern = ".csv", full.names = T),
gsub(".csv", "", list.files(params$newpath, pattern = ".csv")))%>%
map_dfr(~iotools::read.csv.raw(., header = T,sep = " "), .id="sample")
colnames(df.new) = gsub('\"', "", colnames(df.new))
if(grep(GlobalCellType,tail(colnames(df.new),1))!=1)
{
df.new = combine_gates(df.new)
}
library(caTools)
plot.umaps = function(df){
# Area and eccentricity are kept
gct = df[,GlobalCellType]
subsplit = ifelse(length(gct)<100000,length(gct),100000)
df.umap = umap(df[sample.split(gct,subsplit,gtc),c(-(1:5),-ncol(df))], n_neighbors = 50, learning_rate = .5, y=gct)
}
gct = df.new[,GlobalCellType]
subsplit = ifelse(length(gct)<100000,length(gct),10000)
df.umap = umap(df.new[sample.split(gct,subsplit,gtc),c(-(1:5),-ncol(df.new))], n_neighbors = 50, learning_rate = .5, y=gct)
df.umap = umap(df.new[sample.split(gct,subsplit,gct),c(-(1:5),-ncol(df.new))], n_neighbors = 50, learning_rate = .5, y=gct)
gct = as.factor(gct)
df.umap = umap(df.new[sample.split(gct,subsplit,gct),c(-(1:5),-ncol(df.new))], n_neighbors = 50, learning_rate = .5, y=gct)
plot(df.umap)
ggplot(df.umap) + geom_point()
ggplot(df) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType))
ggplot(data = df.new) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType))
subsplit = sample.split(gct,subsplit,gct)
df.umap = umap(df.new[subsplit,c(-(1:5),-ncol(df.new))], n_neighbors = 50, learning_rate = .5, y=gct)
ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType))
ggplot(df.new[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType))
gct
?pch
?geom_point
ggplot(df.new[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,shape=sample))
subsplit
subsplit = ifelse(length(gct)<100000,length(gct),100000)
subsplit = sample.split(gct,subsplit)
df.umap = umap(df.new[subsplit,c(-(1:5),-ncol(df.new))], n_neighbors = 50, learning_rate = .5, y=gct)
ggplot(df.new[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,shape=sample))
ggplot(df.new[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],shape=GlobalCellType,col=sample))
ggplot(df.new[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],shape=GlobalCellType,col=sample)) +theme_void()
?ggplotGrob()
plot.umaps = function(df){
# Area and eccentricity are kept
gct = as.factor(df[,GlobalCellType])
subsplit = ifelse(length(gct)<100000,length(gct),100000)
subsplit = sample.split(gct,subsplit)
df.umap = umap(df[subsplit,c(-(1:5),-ncol(df))], n_neighbors = 50, learning_rate = .5, y=gct)
p = ggplotGrob(ggplot(df[subsplit]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType)) + theme_void())
p2 = ggplotGrob(ggplot(df[subsplit]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=sample)) + theme_void())
grid::grid.newpage()
grid::grid.draw(rbind(p, p2))
}
plot.umaps(df.new)
plot.umaps = function(df){
# Area and eccentricity are kept
gct = as.factor(df[,GlobalCellType])
subsplit = ifelse(length(gct)<100000,length(gct),100000)
subsplit = sample.split(gct,subsplit)
df.umap = umap(df[subsplit,c(-(1:5),-ncol(df))], n_neighbors = 50, learning_rate = .5, y=gct)
p = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType)) + theme_void())
p2 = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=sample)) + theme_void())
grid::grid.newpage()
grid::grid.draw(rbind(p, p2))
}
plot.umaps(df.new)
if(params$comparison) {
plot.umaps(df.new, "Supervised UMAP of the new iteration, at max 100k cells")
}
plot.umaps(df.old, "Supervised UMAP of the old iteration, at max 100k cells")
plot.umaps = function(df, tit){
# Area and eccentricity are kept
gct = as.factor(df[,GlobalCellType])
subsplit = ifelse(length(gct)<100000,length(gct),100000)
subsplit = sample.split(gct,subsplit)
df.umap = umap(df[subsplit,c(-(1:5),-ncol(df))], n_neighbors = 50, learning_rate = .5, y=gct)
p = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,size=1)) + theme_void()) + ggtitle(tit)
p2 = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=sample,size=1)) + theme_void()) + ggtitle(tit)
grid::grid.newpage()
grid::grid.draw(rbind(p, p2))
}
if(params$comparison) {
plot.umaps(df.new, "Supervised UMAP of the new iteration, at max 100k cells")
}
plot.umaps(df.old, "Supervised UMAP of the old iteration, at max 100k cells")
plot.umaps = function(df, tit){
# Area and eccentricity are kept
gct = as.factor(df[,GlobalCellType])
subsplit = ifelse(length(gct)<100000,length(gct),100000)
subsplit = sample.split(gct,subsplit)
df.umap = umap(df[subsplit,c(-(1:5),-ncol(df))], n_neighbors = 50, learning_rate = .5, y=gct)
p = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,size=0.2)) + theme_void() + ggtitle(tit))
p2 = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=sample,size=0.2)) + theme_void() + ggtitle(tit))
grid::grid.newpage()
grid::grid.draw(rbind(p, p2))
}
if(params$comparison) {
plot.umaps(df.new, "Supervised UMAP of the new iteration, at max 100k cells")
}
plot.umaps(df.old, "Supervised UMAP of the old iteration, at max 100k cells")
p = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,size=0.2)) + theme_void() + ggtitle(tit))
df = df.new
p = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,size=0.2)) + theme_void() + ggtitle(tit))
tit = "title"
p = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,size=0.2)) + theme_void() + ggtitle(tit))
p2 = ggplotGrob(ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=sample,size=0.2)) + theme_void() + ggtitle(tit))
grid::grid.newpage()
grid::grid.draw(rbind(p, p2))
ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType,size=0.2)) + theme_void() + ggtitle(tit)
ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType)) + theme_void() + ggtitle(tit)
ggplot(df[subsplit,]) + geom_point(aes(x=df.umap[,1],y=df.umap[,2],col=GlobalCellType),size=0.2) + theme_void() + ggtitle(tit)
if(params$comparison) {
plot.umaps(df.new, "Supervised UMAP of the new iteration, at max 100k cells")
}
plot.umaps(df.old, "Supervised UMAP of the old iteration, at max 100k cells")
colnames(df[subsplit,c(-(1:5),-ncol(df)))
colnames(df[subsplit,c(-(1:5),-ncol(df))
])
plot.umaps(df.old)
plot.umaps(df.old,"title")
?sprintf
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
sprintf("%5.1f", pi)
sprintf("%05.1f", pi)
sprintf("%g",   1e6 * pi)
sprintf("%.1g",   1e6 * pi)
sprintf("%.2g",   1e6 * pi)
sprintf("%.3g",   1e6 * pi)
?grid.text
